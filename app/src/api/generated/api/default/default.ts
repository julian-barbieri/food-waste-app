/**
 * Generated by orval v6.29.1 🍺
 * Do not edit manually.
 * Food Waste App
 * The Food Waste App API description
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import { customFetch } from '../../../mutator/custom-fetch';
import type { AppControllerFindAllParams, PaginationQuery } from '../../model';

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customFetch<void>({ url: `/`, method: 'GET', signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchAppControllerGetHello = async <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
  },
): Promise<QueryClient> => {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getAppControllerGetHelloSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloSuspenseQueryError = unknown;

export const useAppControllerGetHelloSuspense = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerGetHelloSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const appControllerFindAll = (
  params: AppControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return customFetch<PaginationQuery>({
    url: `/paginationQueryTest`,
    method: 'GET',
    params,
    signal,
  });
};

export const getAppControllerFindAllQueryKey = (
  params: AppControllerFindAllParams,
) => {
  return [`/paginationQueryTest`, ...(params ? [params] : [])] as const;
};

export const getAppControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerFindAll>>,
  TError = unknown,
>(
  params: AppControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAppControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerFindAll>>
  > = ({ signal }) => appControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerFindAll>>
>;
export type AppControllerFindAllQueryError = unknown;

export const useAppControllerFindAll = <
  TData = Awaited<ReturnType<typeof appControllerFindAll>>,
  TError = unknown,
>(
  params: AppControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchAppControllerFindAll = async <
  TData = Awaited<ReturnType<typeof appControllerFindAll>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: AppControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
): Promise<QueryClient> => {
  const queryOptions = getAppControllerFindAllQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getAppControllerFindAllSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerFindAll>>,
  TError = unknown,
>(
  params: AppControllerFindAllParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof appControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAppControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerFindAll>>
  > = ({ signal }) => appControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof appControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerFindAllSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerFindAll>>
>;
export type AppControllerFindAllSuspenseQueryError = unknown;

export const useAppControllerFindAllSuspense = <
  TData = Awaited<ReturnType<typeof appControllerFindAll>>,
  TError = unknown,
>(
  params: AppControllerFindAllParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof appControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerFindAllSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
