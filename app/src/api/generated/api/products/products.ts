/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Food Waste App
 * The Food Waste App API description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import { customFetch } from '../../../mutator/custom-fetch';
import type {
  CreateProductDto,
  ProductEntity,
  UpdateProductDto,
} from '../../model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const productControllerCreate = (
  createProductDto: CreateProductDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/products`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createProductDto,
    },
    options,
  );
};

export const getProductControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productControllerCreate>>,
    { data: CreateProductDto }
  > = (props) => {
    const { data } = props ?? {};

    return productControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productControllerCreate>>
>;
export type ProductControllerCreateMutationBody = CreateProductDto;
export type ProductControllerCreateMutationError = unknown;

export const useProductControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerCreate>>,
    TError,
    { data: CreateProductDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productControllerCreate>>,
  TError,
  { data: CreateProductDto },
  TContext
> => {
  const mutationOptions = getProductControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const productControllerFindAll = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<ProductEntity[]>(
    { url: `/products`, method: 'GET', signal },
    options,
  );
};

export const getProductControllerFindAllQueryKey = () => {
  return [`/products`] as const;
};

export const getProductControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerFindAll>>
  > = ({ signal }) => productControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerFindAll>>
>;
export type ProductControllerFindAllQueryError = unknown;

export const useProductControllerFindAll = <
  TData = Awaited<ReturnType<typeof productControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProductControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchProductControllerFindAll = async <
  TData = Awaited<ReturnType<typeof productControllerFindAll>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getProductControllerFindAllQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getProductControllerFindAllSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof productControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerFindAll>>
  > = ({ signal }) => productControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof productControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductControllerFindAllSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerFindAll>>
>;
export type ProductControllerFindAllSuspenseQueryError = unknown;

export const useProductControllerFindAllSuspense = <
  TData = Awaited<ReturnType<typeof productControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof productControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProductControllerFindAllSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const productControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<ProductEntity>(
    {
      url: `/products/${encodeURIComponent(String(id))}`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getProductControllerFindOneQueryKey = (id: string) => {
  return [`/products/${id}`] as const;
};

export const getProductControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerFindOne>>
  > = ({ signal }) => productControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof productControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerFindOne>>
>;
export type ProductControllerFindOneQueryError = void;

export const useProductControllerFindOne = <
  TData = Awaited<ReturnType<typeof productControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProductControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchProductControllerFindOne = async <
  TData = Awaited<ReturnType<typeof productControllerFindOne>>,
  TError = void,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getProductControllerFindOneQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getProductControllerFindOneSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerFindOne>>
  > = ({ signal }) => productControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof productControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductControllerFindOneSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerFindOne>>
>;
export type ProductControllerFindOneSuspenseQueryError = void;

export const useProductControllerFindOneSuspense = <
  TData = Awaited<ReturnType<typeof productControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof productControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProductControllerFindOneSuspenseQueryOptions(
    id,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const productControllerUpdate = (
  id: string,
  updateProductDto: UpdateProductDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/products/${encodeURIComponent(String(id))}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateProductDto,
    },
    options,
  );
};

export const getProductControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerUpdate>>,
    TError,
    { id: string; data: UpdateProductDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productControllerUpdate>>,
  TError,
  { id: string; data: UpdateProductDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productControllerUpdate>>,
    { id: string; data: UpdateProductDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return productControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productControllerUpdate>>
>;
export type ProductControllerUpdateMutationBody = UpdateProductDto;
export type ProductControllerUpdateMutationError = unknown;

export const useProductControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerUpdate>>,
    TError,
    { id: string; data: UpdateProductDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productControllerUpdate>>,
  TError,
  { id: string; data: UpdateProductDto },
  TContext
> => {
  const mutationOptions = getProductControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const productControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    { url: `/products/${encodeURIComponent(String(id))}`, method: 'DELETE' },
    options,
  );
};

export const getProductControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return productControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof productControllerRemove>>
>;

export type ProductControllerRemoveMutationError = unknown;

export const useProductControllerRemove = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getProductControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
