/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Food Waste App
 * The Food Waste App API description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import { customFetch } from '../../../mutator/custom-fetch';
import type {
  CreateTransactionDto,
  TransactionEntity,
  UpdateTransactionDto,
} from '../../model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const transactionControllerCreate = (
  createTransactionDto: CreateTransactionDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/transactions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createTransactionDto,
    },
    options,
  );
};

export const getTransactionControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerCreate>>,
    TError,
    { data: CreateTransactionDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transactionControllerCreate>>,
  TError,
  { data: CreateTransactionDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transactionControllerCreate>>,
    { data: CreateTransactionDto }
  > = (props) => {
    const { data } = props ?? {};

    return transactionControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransactionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerCreate>>
>;
export type TransactionControllerCreateMutationBody = CreateTransactionDto;
export type TransactionControllerCreateMutationError = unknown;

export const useTransactionControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerCreate>>,
    TError,
    { data: CreateTransactionDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof transactionControllerCreate>>,
  TError,
  { data: CreateTransactionDto },
  TContext
> => {
  const mutationOptions =
    getTransactionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const transactionControllerFindAll = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<TransactionEntity[]>(
    { url: `/transactions`, method: 'GET', signal },
    options,
  );
};

export const getTransactionControllerFindAllQueryKey = () => {
  return [`/transactions`] as const;
};

export const getTransactionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTransactionControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerFindAll>>
  > = ({ signal }) => transactionControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof transactionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TransactionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerFindAll>>
>;
export type TransactionControllerFindAllQueryError = unknown;

export const useTransactionControllerFindAll = <
  TData = Awaited<ReturnType<typeof transactionControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTransactionControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchTransactionControllerFindAll = async <
  TData = Awaited<ReturnType<typeof transactionControllerFindAll>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getTransactionControllerFindAllQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getTransactionControllerFindAllSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTransactionControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerFindAll>>
  > = ({ signal }) => transactionControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof transactionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TransactionControllerFindAllSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerFindAll>>
>;
export type TransactionControllerFindAllSuspenseQueryError = unknown;

export const useTransactionControllerFindAllSuspense = <
  TData = Awaited<ReturnType<typeof transactionControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTransactionControllerFindAllSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const transactionControllerFindAllNotDeliveredById = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<TransactionEntity[]>(
    {
      url: `/transactions/orders/${encodeURIComponent(String(id))}`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getTransactionControllerFindAllNotDeliveredByIdQueryKey = (
  id: string,
) => {
  return [`/transactions/orders/${id}`] as const;
};

export const getTransactionControllerFindAllNotDeliveredByIdQueryOptions = <
  TData = Awaited<
    ReturnType<typeof transactionControllerFindAllNotDeliveredById>
  >,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof transactionControllerFindAllNotDeliveredById>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTransactionControllerFindAllNotDeliveredByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>
  > = ({ signal }) =>
    transactionControllerFindAllNotDeliveredById(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TransactionControllerFindAllNotDeliveredByIdQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>
  >;
export type TransactionControllerFindAllNotDeliveredByIdQueryError = void;

export const useTransactionControllerFindAllNotDeliveredById = <
  TData = Awaited<
    ReturnType<typeof transactionControllerFindAllNotDeliveredById>
  >,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof transactionControllerFindAllNotDeliveredById>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTransactionControllerFindAllNotDeliveredByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchTransactionControllerFindAllNotDeliveredById = async <
  TData = Awaited<
    ReturnType<typeof transactionControllerFindAllNotDeliveredById>
  >,
  TError = void,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof transactionControllerFindAllNotDeliveredById>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions =
    getTransactionControllerFindAllNotDeliveredByIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getTransactionControllerFindAllNotDeliveredByIdSuspenseQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof transactionControllerFindAllNotDeliveredById>
    >,
    TError = void,
  >(
    id: string,
    options?: {
      query?: Partial<
        UseSuspenseQueryOptions<
          Awaited<
            ReturnType<typeof transactionControllerFindAllNotDeliveredById>
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof customFetch>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getTransactionControllerFindAllNotDeliveredByIdQueryKey(id);

    const queryFn: QueryFunction<
      Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>
    > = ({ signal }) =>
      transactionControllerFindAllNotDeliveredById(id, requestOptions, signal);

    return {
      queryKey,
      queryFn,
      enabled: !!id,
      ...queryOptions,
    } as UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type TransactionControllerFindAllNotDeliveredByIdSuspenseQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof transactionControllerFindAllNotDeliveredById>>
  >;
export type TransactionControllerFindAllNotDeliveredByIdSuspenseQueryError =
  void;

export const useTransactionControllerFindAllNotDeliveredByIdSuspense = <
  TData = Awaited<
    ReturnType<typeof transactionControllerFindAllNotDeliveredById>
  >,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<
          ReturnType<typeof transactionControllerFindAllNotDeliveredById>
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTransactionControllerFindAllNotDeliveredByIdSuspenseQueryOptions(
      id,
      options,
    );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const transactionControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<TransactionEntity>(
    {
      url: `/transactions/${encodeURIComponent(String(id))}`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getTransactionControllerFindOneQueryKey = (id: string) => {
  return [`/transactions/${id}`] as const;
};

export const getTransactionControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTransactionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerFindOne>>
  > = ({ signal }) => transactionControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof transactionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TransactionControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerFindOne>>
>;
export type TransactionControllerFindOneQueryError = void;

export const useTransactionControllerFindOne = <
  TData = Awaited<ReturnType<typeof transactionControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTransactionControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchTransactionControllerFindOne = async <
  TData = Awaited<ReturnType<typeof transactionControllerFindOne>>,
  TError = void,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getTransactionControllerFindOneQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getTransactionControllerFindOneSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof transactionControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTransactionControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof transactionControllerFindOne>>
  > = ({ signal }) => transactionControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof transactionControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TransactionControllerFindOneSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerFindOne>>
>;
export type TransactionControllerFindOneSuspenseQueryError = void;

export const useTransactionControllerFindOneSuspense = <
  TData = Awaited<ReturnType<typeof transactionControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof transactionControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTransactionControllerFindOneSuspenseQueryOptions(
    id,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const transactionControllerUpdate = (
  id: string,
  updateTransactionDto: UpdateTransactionDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/transactions/${encodeURIComponent(String(id))}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateTransactionDto,
    },
    options,
  );
};

export const getTransactionControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerUpdate>>,
    TError,
    { id: string; data: UpdateTransactionDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transactionControllerUpdate>>,
  TError,
  { id: string; data: UpdateTransactionDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transactionControllerUpdate>>,
    { id: string; data: UpdateTransactionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return transactionControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransactionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerUpdate>>
>;
export type TransactionControllerUpdateMutationBody = UpdateTransactionDto;
export type TransactionControllerUpdateMutationError = unknown;

export const useTransactionControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerUpdate>>,
    TError,
    { id: string; data: UpdateTransactionDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof transactionControllerUpdate>>,
  TError,
  { id: string; data: UpdateTransactionDto },
  TContext
> => {
  const mutationOptions =
    getTransactionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const transactionControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/transactions/${encodeURIComponent(String(id))}`,
      method: 'DELETE',
    },
    options,
  );
};

export const getTransactionControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transactionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transactionControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return transactionControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransactionControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof transactionControllerRemove>>
>;

export type TransactionControllerRemoveMutationError = unknown;

export const useTransactionControllerRemove = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transactionControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof transactionControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getTransactionControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
