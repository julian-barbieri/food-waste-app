/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Food Waste App
 * The Food Waste App API description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import { customFetch } from '../../../mutator/custom-fetch';
import type { AuthEntity, LoginDto, UserEntity } from '../../model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerLogin = (
  loginDto: LoginDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<AuthEntity>(
    {
      url: `/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginDto,
    },
    options,
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const authControllerMe = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<UserEntity>(
    { url: `/auth/me`, method: 'GET', signal },
    options,
  );
};

export const getAuthControllerMeQueryKey = () => {
  return [`/auth/me`] as const;
};

export const getAuthControllerMeQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authControllerMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerMe>>
  > = ({ signal }) => authControllerMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerMe>>
>;
export type AuthControllerMeQueryError = unknown;

export const useAuthControllerMe = <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authControllerMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchAuthControllerMe = async <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerMe>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getAuthControllerMeQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getAuthControllerMeSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof authControllerMe>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerMe>>
  > = ({ signal }) => authControllerMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof authControllerMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerMeSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerMe>>
>;
export type AuthControllerMeSuspenseQueryError = unknown;

export const useAuthControllerMeSuspense = <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof authControllerMe>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthControllerMeSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
