/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Food Waste App
 * The Food Waste App API description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import { customFetch } from '../../../mutator/custom-fetch';
import type { CreateStoreDto, StoreEntity, UpdateStoreDto } from '../../model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const storesControllerCreate = (
  createStoreDto: CreateStoreDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<StoreEntity>(
    {
      url: `/stores`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createStoreDto,
    },
    options,
  );
};

export const getStoresControllerCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerCreate>>,
    TError,
    { data: CreateStoreDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof storesControllerCreate>>,
  TError,
  { data: CreateStoreDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof storesControllerCreate>>,
    { data: CreateStoreDto }
  > = (props) => {
    const { data } = props ?? {};

    return storesControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StoresControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerCreate>>
>;
export type StoresControllerCreateMutationBody = CreateStoreDto;
export type StoresControllerCreateMutationError = void;

export const useStoresControllerCreate = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerCreate>>,
    TError,
    { data: CreateStoreDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof storesControllerCreate>>,
  TError,
  { data: CreateStoreDto },
  TContext
> => {
  const mutationOptions = getStoresControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const storesControllerFindAll = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<StoreEntity[]>(
    { url: `/stores`, method: 'GET', signal },
    options,
  );
};

export const getStoresControllerFindAllQueryKey = () => {
  return [`/stores`] as const;
};

export const getStoresControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindAll>>
  > = ({ signal }) => storesControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindAll>>
>;
export type StoresControllerFindAllQueryError = unknown;

export const useStoresControllerFindAll = <
  TData = Awaited<ReturnType<typeof storesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStoresControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchStoresControllerFindAll = async <
  TData = Awaited<ReturnType<typeof storesControllerFindAll>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getStoresControllerFindAllQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getStoresControllerFindAllSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindAll>>
  > = ({ signal }) => storesControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindAllSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindAll>>
>;
export type StoresControllerFindAllSuspenseQueryError = unknown;

export const useStoresControllerFindAllSuspense = <
  TData = Awaited<ReturnType<typeof storesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStoresControllerFindAllSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const storesControllerFindActiveStores = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<StoreEntity[]>(
    { url: `/stores/activeStores`, method: 'GET', signal },
    options,
  );
};

export const getStoresControllerFindActiveStoresQueryKey = () => {
  return [`/stores/activeStores`] as const;
};

export const getStoresControllerFindActiveStoresQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindActiveStoresQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindActiveStores>>
  > = ({ signal }) => storesControllerFindActiveStores(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindActiveStoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindActiveStores>>
>;
export type StoresControllerFindActiveStoresQueryError = unknown;

export const useStoresControllerFindActiveStores = <
  TData = Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStoresControllerFindActiveStoresQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchStoresControllerFindActiveStores = async <
  TData = Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getStoresControllerFindActiveStoresQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getStoresControllerFindActiveStoresSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindActiveStoresQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindActiveStores>>
  > = ({ signal }) => storesControllerFindActiveStores(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindActiveStoresSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindActiveStores>>
>;
export type StoresControllerFindActiveStoresSuspenseQueryError = unknown;

export const useStoresControllerFindActiveStoresSuspense = <
  TData = Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof storesControllerFindActiveStores>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getStoresControllerFindActiveStoresSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const storesControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal,
) => {
  return customFetch<StoreEntity>(
    { url: `/stores/${encodeURIComponent(String(id))}`, method: 'GET', signal },
    options,
  );
};

export const getStoresControllerFindOneQueryKey = (id: string) => {
  return [`/stores/${id}`] as const;
};

export const getStoresControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindOne>>
  > = ({ signal }) => storesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindOne>>
>;
export type StoresControllerFindOneQueryError = void;

export const useStoresControllerFindOne = <
  TData = Awaited<ReturnType<typeof storesControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStoresControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const prefetchStoresControllerFindOne = async <
  TData = Awaited<ReturnType<typeof storesControllerFindOne>>,
  TError = void,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getStoresControllerFindOneQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getStoresControllerFindOneSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof storesControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStoresControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof storesControllerFindOne>>
  > = ({ signal }) => storesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof storesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type StoresControllerFindOneSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerFindOne>>
>;
export type StoresControllerFindOneSuspenseQueryError = void;

export const useStoresControllerFindOneSuspense = <
  TData = Awaited<ReturnType<typeof storesControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof storesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStoresControllerFindOneSuspenseQueryOptions(
    id,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const storesControllerUpdate = (
  id: string,
  updateStoreDto: UpdateStoreDto,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    {
      url: `/stores/${encodeURIComponent(String(id))}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateStoreDto,
    },
    options,
  );
};

export const getStoresControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerUpdate>>,
    TError,
    { id: string; data: UpdateStoreDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof storesControllerUpdate>>,
  TError,
  { id: string; data: UpdateStoreDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof storesControllerUpdate>>,
    { id: string; data: UpdateStoreDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return storesControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StoresControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerUpdate>>
>;
export type StoresControllerUpdateMutationBody = UpdateStoreDto;
export type StoresControllerUpdateMutationError = unknown;

export const useStoresControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerUpdate>>,
    TError,
    { id: string; data: UpdateStoreDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof storesControllerUpdate>>,
  TError,
  { id: string; data: UpdateStoreDto },
  TContext
> => {
  const mutationOptions = getStoresControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const storesControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
) => {
  return customFetch<void>(
    { url: `/stores/${encodeURIComponent(String(id))}`, method: 'DELETE' },
    options,
  );
};

export const getStoresControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof storesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof storesControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return storesControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StoresControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof storesControllerRemove>>
>;

export type StoresControllerRemoveMutationError = unknown;

export const useStoresControllerRemove = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof storesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof storesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getStoresControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
