// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(uuid())
  firstName      String
  lastName       String
  email          String              @unique
  hashedPassword String
  favoriteStores UserFavoriteStore[]
  transactions   Transaction[]
  stores         Store[]
}

model Store {
  id                 String              @id @default(uuid())
  userId             String
  name               String
  description        String
  logoUrl            String
  backgroundPhotoUrl String
  address            String
  latitude           Float
  longitude          Float
  isActive           Boolean
  user               User                @relation(fields: [userId], references: [id])
  products           Product[]
  favoritedBy        UserFavoriteStore[]
}

model UserFavoriteStore {
  userId  String
  storeId String
  user    User   @relation(fields: [userId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])

  @@id([userId, storeId])
}

model Product {
  id                String        @id @default(uuid())
  storeId           String
  type              String
  oldPrice          Float
  actualPrice       Float
  availableQuantity Int
  pickupStartTime   DateTime
  pickupEndTime     DateTime
  store             Store         @relation(fields: [storeId], references: [id])
  transactions      Transaction[]
}

model Transaction {
  id              String      @id @default(uuid())
  userId          String
  productId       String
  quantity        Int
  totalAmount     Float
  transactionDate DateTime
  delivered       Boolean
  user            User        @relation(fields: [userId], references: [id])
  product         Product     @relation(fields: [productId], references: [id])
  review          Review?
}

model Review {
  id            String      @id @default(uuid())
  transactionId String      @unique
  rating        Int
  comment       String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
